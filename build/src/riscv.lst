GAS LISTING /tmp/ccBf6xWB.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB38:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by os on 12/11/23.
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** #include "../h/riscv.hpp"
   5:src/riscv.cpp **** #include "../lib/console.h"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../test/printing.hpp"
   8:src/riscv.cpp **** #include "../lib/mem.h"
   9:src/riscv.cpp **** #include "../h/MemoryAllocator.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 12 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra"); //ra je lokacija sa koje je staticka metoda pozvana
  20              		.loc 1 13 5
  21              		.loc 1 13 38 is_stmt 0
  22              	#APP
  23              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile ("sret"); //izlazimo iz prekidne rutine ovim sret umesto onim iz supervisorTra
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 30 is_stmt 0
  28              	# 14 "src/riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE38:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
GAS LISTING /tmp/ccBf6xWB.s 			page 2


  45 0000 43617573 		.string	"Cause: "
  45      653A2000 
  46              		.align	3
  47              	.LC1:
  48 0008 0A50433A 		.string	"\nPC: "
  48      2000
  49 000e 0000     		.align	3
  50              	.LC2:
  51 0010 0A547261 		.string	"\nTrapVal: "
  51      7056616C 
  51      3A2000
  52              		.text
  53              		.align	2
  54              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  56              	_ZN5Riscv20handleSupervisorTrapEv:
  57              	.LFB39:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::handleSupervisorTrap() {
  58              		.loc 1 17 36 is_stmt 1
  59              		.cfi_startproc
  60 0020 130101FB 		addi	sp,sp,-80
  61              		.cfi_def_cfa_offset 80
  62 0024 23341104 		sd	ra,72(sp)
  63 0028 23308104 		sd	s0,64(sp)
  64 002c 233C9102 		sd	s1,56(sp)
  65 0030 23382103 		sd	s2,48(sp)
  66 0034 23343103 		sd	s3,40(sp)
  67              		.cfi_offset 1, -8
  68              		.cfi_offset 8, -16
  69              		.cfi_offset 9, -24
  70              		.cfi_offset 18, -32
  71              		.cfi_offset 19, -40
  72 0038 13040105 		addi	s0,sp,80
  73              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp **** //    print_String("handlesuptrap()");
  19:src/riscv.cpp ****     uint64 scause = r_scause();
  74              		.loc 1 19 5
  75              	.LBB24:
  76              	.LBB25:
  77              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 12/11/23.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** class Riscv{
  13:src/../h/riscv.hpp **** public:
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp ****     //pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  16:src/../h/riscv.hpp ****     static void popSppSpie();
  17:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccBf6xWB.s 			page 3


  18:src/../h/riscv.hpp **** //    //push x3..x31 registers on stack
  19:src/../h/riscv.hpp **** //    static void pushRegisters();
  20:src/../h/riscv.hpp **** //    static void popRegisters();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     static uint64 r_scause();
  23:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     static uint64 r_sepc();
  26:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     static uint64 r_stvec();
  29:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     static uint64 r_stval();
  32:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     enum BitMaskSip{
  35:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1), //IP interrupt pending
  36:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  37:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  38:src/../h/riscv.hpp ****     };
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  41:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  42:src/../h/riscv.hpp ****     static uint64 r_sip();
  43:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     enum BitMaskSstatus{
  46:src/../h/riscv.hpp ****         SSTATUS_SIE = (1<<1),
  47:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  48:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  49:src/../h/riscv.hpp ****     };
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  52:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  53:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  54:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     //supervisor trap
  57:src/../h/riscv.hpp **** //    static void supervisorTrap();
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp **** private:
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     //supervisor trap handler
  62:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  63:src/../h/riscv.hpp ****     static void softwareInterruptHandler();
  64:src/../h/riscv.hpp ****     static void timerInterruptHandler();
  65:src/../h/riscv.hpp ****     static void consoleInterruptHandler();
  66:src/../h/riscv.hpp **** };
  67:src/../h/riscv.hpp **** //inline fje se na mestu koriscenja nece generisati pozivi ovih fja nego se ovaj kod ugradjuje na t
  68:src/../h/riscv.hpp **** // ne generisu se pozivi fja. ne brise se ra registar(nema upisa u njega)
  69:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause() {
  70:src/../h/riscv.hpp ****     uint64 volatile scause;
  78              		.loc 2 70 5
  71:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  79              		.loc 2 71 5
  80              		.loc 2 71 72 is_stmt 0
GAS LISTING /tmp/ccBf6xWB.s 			page 4


  81              	#APP
  82              	# 71 "src/../h/riscv.hpp" 1
  72              	    return scause;
  83              		csrr a5, scause
  84              	# 0 "" 2
  85              	#NO_APP
  86 0040 2338F4FA 		sd	a5,-80(s0)
  87              		.loc 2 72 5 is_stmt 1
  88              		.loc 2 72 12 is_stmt 0
  89 0044 833704FB 		ld	a5,-80(s0)
  90              	.LVL0:
  91              	.LBE25:
  92              	.LBE24:
  20:src/riscv.cpp ****     if (scause == 0x0000000000000009UL || scause == 0x0000000000000008UL) {
  93              		.loc 1 20 5 is_stmt 1
  94              	.LBB26:
  95              		.loc 1 20 40 is_stmt 0
  96 0048 938787FF 		addi	a5,a5,-8
  97              	.LVL1:
  98              		.loc 1 20 5
  99 004c 13071000 		li	a4,1
 100 0050 6366F712 		bgtu	a5,a4,.L4
 101              	.LBB27:
  21:src/riscv.cpp ****         //interrupt: NO, cause code : environment call from S-mode (9)
  22:src/riscv.cpp ****         uint64 sepc = r_sepc() +
 102              		.loc 1 22 9 is_stmt 1
 103              	.LBB28:
 104              	.LBB29:
  73:src/../h/riscv.hpp **** }
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  76:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  77:src/../h/riscv.hpp **** }
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc() {
  80:src/../h/riscv.hpp ****     uint64 volatile sepc;
 105              		.loc 2 80 5
  81:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 106              		.loc 2 81 5
 107              		.loc 2 81 64 is_stmt 0
 108              	#APP
 109              	# 81 "src/../h/riscv.hpp" 1
  82              	    return sepc;
 110              		csrr a5, sepc
 111              	# 0 "" 2
 112              	.LVL2:
 113              	#NO_APP
 114 0058 2334F4FC 		sd	a5,-56(s0)
 115              		.loc 2 82 5 is_stmt 1
 116              		.loc 2 82 12 is_stmt 0
 117 005c 833484FC 		ld	s1,-56(s0)
 118              	.LBE29:
 119              	.LBE28:
  23:src/riscv.cpp ****                       4; //sacuvan sepc na steku prve niti // povecavamo za jednu adresu da bismo s
 120              		.loc 1 23 23
 121 0060 93844400 		addi	s1,s1,4
 122              	.LVL3:
GAS LISTING /tmp/ccBf6xWB.s 			page 5


  24:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 123              		.loc 1 24 9 is_stmt 1
 124              	.LBB30:
 125              	.LBB31:
  83:src/../h/riscv.hpp **** }
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc){
  86:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
  87:src/../h/riscv.hpp **** }
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec() {
  90:src/../h/riscv.hpp ****     uint64 volatile stvec;
  91:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
  92:src/../h/riscv.hpp ****     return stvec;
  93:src/../h/riscv.hpp **** }
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec){
  96:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval(){
 100:src/../h/riscv.hpp ****     uint64 volatile stval;
 101:src/../h/riscv.hpp ****     __asm__ volatile("csrr %[stval], stval" : [stval] "=r"(stval));
 102:src/../h/riscv.hpp ****     return stval;
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval){
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 107:src/../h/riscv.hpp **** }
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask){
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask){
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip(){
 118:src/../h/riscv.hpp ****     uint64 volatile sip;
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 120:src/../h/riscv.hpp ****     return sip;
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip){
 123:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 124:src/../h/riscv.hpp **** }
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 126:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 126              		.loc 2 126 5
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 127              		.loc 2 127 5
 128              		.loc 2 127 76 is_stmt 0
 129              	#APP
 130              	# 127 "src/../h/riscv.hpp" 1
 128              	    return sstatus;
 131              		csrr a5, sstatus
 132              	# 0 "" 2
GAS LISTING /tmp/ccBf6xWB.s 			page 6


 133              	#NO_APP
 134 0068 2330F4FC 		sd	a5,-64(s0)
 135              		.loc 2 128 5 is_stmt 1
 136              		.loc 2 128 12 is_stmt 0
 137 006c 833904FC 		ld	s3,-64(s0)
 138              	.LVL4:
 139              	.LBE31:
 140              	.LBE30:
  25:src/riscv.cpp ****         uint64 a0reg;
 141              		.loc 1 25 9 is_stmt 1
  26:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r"(a0reg));
 142              		.loc 1 26 9
 143              		.loc 1 26 52 is_stmt 0
 144              	#APP
 145              	# 26 "src/riscv.cpp" 1
  27              	        int ret;
 146              		mv a5, a0
 147              	# 0 "" 2
 148              	.LVL5:
 149              		.loc 1 27 9 is_stmt 1
  28:src/riscv.cpp ****         int retval;
 150              		.loc 1 28 9
  29:src/riscv.cpp ****         switch (a0reg) {
 151              		.loc 1 29 9
 152              	#NO_APP
 153              	.LBB32:
 154 0074 13074001 		li	a4,20
 155 0078 6364F702 		bgtu	a5,a4,.L5
 156 007c 638E0704 		beqz	a5,.L6
 157 0080 636CF704 		bgtu	a5,a4,.L6
 158 0084 93972700 		slli	a5,a5,2
 159              	.LVL6:
 160 0088 17070000 		lla	a4,.L8
 160      13070700 
 161 0090 B387E700 		add	a5,a5,a4
 162 0094 83A70700 		lw	a5,0(a5)
 163 0098 B387E700 		add	a5,a5,a4
 164 009c 67800700 		jr	a5
 165              		.section	.rodata
 166              		.align	2
 167              		.align	2
 168              	.L8:
 169 0000 00000000 		.word	.L6-.L8
 170 0004 00000000 		.word	.L13-.L8
 171 0008 00000000 		.word	.L12-.L8
 172 000c 00000000 		.word	.L6-.L8
 173 0010 00000000 		.word	.L6-.L8
 174 0014 00000000 		.word	.L6-.L8
 175 0018 00000000 		.word	.L6-.L8
 176 001c 00000000 		.word	.L6-.L8
 177 0020 00000000 		.word	.L6-.L8
 178 0024 00000000 		.word	.L6-.L8
 179 0028 00000000 		.word	.L6-.L8
 180 002c 00000000 		.word	.L6-.L8
 181 0030 00000000 		.word	.L6-.L8
 182 0034 00000000 		.word	.L6-.L8
 183 0038 00000000 		.word	.L6-.L8
GAS LISTING /tmp/ccBf6xWB.s 			page 7


 184 003c 00000000 		.word	.L6-.L8
 185 0040 00000000 		.word	.L6-.L8
 186 0044 00000000 		.word	.L11-.L8
 187 0048 00000000 		.word	.L10-.L8
 188 004c 00000000 		.word	.L9-.L8
 189 0050 00000000 		.word	.L7-.L8
 190              		.text
 191              	.LVL7:
 192              	.L5:
 193 00a0 13071004 		li	a4,65
 194 00a4 6382E70C 		beq	a5,a4,.L14
 195 00a8 13072004 		li	a4,66
 196 00ac 6396E702 		bne	a5,a4,.L6
 197              	.LBB33:
  30:src/riscv.cpp ****             case 0x01: //mem_alloc(size)
  31:src/riscv.cpp **** //                print_String("hej");
  32:src/riscv.cpp ****                 size_t size;
  33:src/riscv.cpp ****                 void *ptr;
  34:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
  35:src/riscv.cpp **** //                ptr = __mem_alloc(size);
  36:src/riscv.cpp **** //                MemoryAllocator::mem_alloc(size);
  37:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
  38:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
  39:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(fp)");
  40:src/riscv.cpp ****                 break;
  41:src/riscv.cpp ****             case 0x02: //mem_free(void*)
  42:src/riscv.cpp ****                 void* addr;
  43:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
  44:src/riscv.cpp **** //                MemoryAllocator::mem_free(addr);
  45:src/riscv.cpp ****                 ret = MemoryAllocator::mem_free(addr);
  46:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ret));
  47:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(fp)");
  48:src/riscv.cpp ****                 break;
  49:src/riscv.cpp ****             case 0x11: //thread_create(thread_t* handle, void(*body)(void*), void* arg)
  50:src/riscv.cpp **** //                uint64 handle, body, arg, stack;
  51:src/riscv.cpp ****                 thread_t* handle;
  52:src/riscv.cpp ****                 void(*body)(void*);
  53:src/riscv.cpp ****                 void* arg;
  54:src/riscv.cpp ****                 void *stack;
  55:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(handle));
  56:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r"(body));
  57:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6" : "=r"(arg));
  58:src/riscv.cpp ****                 __asm__ volatile("mv %0, a7" : "=r"(stack));
  59:src/riscv.cpp ****                 *handle = TCB::createThread(handle, body,arg, stack);
  60:src/riscv.cpp **** //                __asm__ volatile("mv t0, %0" : : "r"(ret));
  61:src/riscv.cpp ****                 __asm__ volatile("li t0, 0");
  62:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(fp)");
  63:src/riscv.cpp ****                 break;
  64:src/riscv.cpp ****             case 0x12: //thread_exit()
  65:src/riscv.cpp ****                 TCB::threadExit();
  66:src/riscv.cpp ****                 break;
  67:src/riscv.cpp ****             case 0x13: //thread_dispatch()
  68:src/riscv.cpp ****                 TCB::yield();
  69:src/riscv.cpp ****                 break;
  70:src/riscv.cpp ****             case 0x14: //thread_join()
  71:src/riscv.cpp ****                 thread_t handle_join;
  72:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(handle_join));
GAS LISTING /tmp/ccBf6xWB.s 			page 8


  73:src/riscv.cpp ****                 TCB::join(handle_join);
  74:src/riscv.cpp **** 
  75:src/riscv.cpp ****                 break;
  76:src/riscv.cpp ****             case 0x21: //sem_open(sem_t* handle, unsigned init)
  77:src/riscv.cpp ****                 break;
  78:src/riscv.cpp ****             case 0x22: //sem_close(sem_t handle)
  79:src/riscv.cpp ****                 break;
  80:src/riscv.cpp ****             case 0x23: //sem_wait(semt id)
  81:src/riscv.cpp ****                 break;
  82:src/riscv.cpp ****             case 0x24: //sem_signal(semt id)
  83:src/riscv.cpp ****                 break;
  84:src/riscv.cpp ****             case 0x31: //time_sleep(time_t)
  85:src/riscv.cpp ****                 break;
  86:src/riscv.cpp ****             case 0x41: //getc
  87:src/riscv.cpp ****                  retval = __getc();
  88:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(retval));
  89:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(fp)");
  90:src/riscv.cpp ****                 break;
  91:src/riscv.cpp ****             case 0x42: //putc
 198              		.loc 1 91 13
  92:src/riscv.cpp ****                 char c;
 199              		.loc 1 92 17
  93:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(c));
 200              		.loc 1 93 17
 201              		.loc 1 93 56 is_stmt 0
 202              	#APP
 203              	# 93 "src/riscv.cpp" 1
  94              	                __putc(c);
 204              		mv a0, a1
 205              	# 0 "" 2
 206              	.LVL8:
 207              		.loc 1 94 17 is_stmt 1
 208              		.loc 1 94 23 is_stmt 0
 209              	#NO_APP
 210 00b4 1375F50F 		andi	a0,a0,0xff
 211 00b8 97000000 		call	__putc@plt
 211      E7800000 
 212              	.LVL9:
  95:src/riscv.cpp ****                 break;
 213              		.loc 1 95 17 is_stmt 1
 214 00c0 6F008001 		j	.L6
 215              	.L13:
  30:src/riscv.cpp **** //                print_String("hej");
 216              		.loc 1 30 13
  32:src/riscv.cpp ****                 void *ptr;
 217              		.loc 1 32 17
  33:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
 218              		.loc 1 33 17
  34:src/riscv.cpp **** //                ptr = __mem_alloc(size);
 219              		.loc 1 34 17
  34:src/riscv.cpp **** //                ptr = __mem_alloc(size);
 220              		.loc 1 34 59 is_stmt 0
 221              	#APP
 222              	# 34 "src/riscv.cpp" 1
 223              		mv a0, a1
 224              	# 0 "" 2
 225              	.LVL10:
GAS LISTING /tmp/ccBf6xWB.s 			page 9


  37:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
 226              		.loc 1 37 17 is_stmt 1
  37:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ptr));
 227              		.loc 1 37 49 is_stmt 0
 228              	#NO_APP
 229 00c8 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 229      E7800000 
 230              	.LVL11:
  38:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(fp)");
 231              		.loc 1 38 17 is_stmt 1
  38:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(fp)");
 232              		.loc 1 38 59 is_stmt 0
 233              	#APP
 234              	# 38 "src/riscv.cpp" 1
  39:src/riscv.cpp ****                 break;
 235              		mv t0, a0
 236              	# 0 "" 2
 237              		.loc 1 39 17 is_stmt 1
  39:src/riscv.cpp ****                 break;
 238              		.loc 1 39 50 is_stmt 0
 239              	# 39 "src/riscv.cpp" 1
  40:src/riscv.cpp ****             case 0x02: //mem_free(void*)
 240              		sw t0, 80(fp)
 241              	# 0 "" 2
 242              		.loc 1 40 17 is_stmt 1
 243              	.LVL12:
 244              	#NO_APP
 245              	.L6:
 246              	.LBE33:
 247              	.LBE32:
  96:src/riscv.cpp ****             default:
  97:src/riscv.cpp ****                 break;
  98:src/riscv.cpp ****         }
  99:src/riscv.cpp ****         //TCB::timesliceCounter = 0; //ova nit ce biti novi running
 100:src/riscv.cpp ****         //TCB::dispatch();
 101:src/riscv.cpp ****         w_sstatus(sstatus);
 248              		.loc 1 101 9
 249              	.LBB35:
 250              	.LBB36:
 129:src/../h/riscv.hpp **** }
 130:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus){
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 251              		.loc 2 131 5
 252              		.loc 2 131 77 is_stmt 0
 253              	#APP
 254              	# 131 "src/../h/riscv.hpp" 1
 132              	}
 255              		csrw sstatus, s3
 256              	# 0 "" 2
 257              	.LVL13:
 258              	#NO_APP
 259              	.LBE36:
 260              	.LBE35:
 102:src/riscv.cpp ****         w_sepc(sepc); //sepc je ovde sepc druge niti iz dispatcha (koja je prvobitno u sepc uradila
 261              		.loc 1 102 9 is_stmt 1
 262              	.LBB37:
 263              	.LBB38:
GAS LISTING /tmp/ccBf6xWB.s 			page 10


  86:src/../h/riscv.hpp **** }
 264              		.loc 2 86 5
  86:src/../h/riscv.hpp **** }
 265              		.loc 2 86 65 is_stmt 0
 266              	#APP
 267              	# 86 "src/../h/riscv.hpp" 1
 268              		csrw sepc, s1
 269              	# 0 "" 2
 270              	.LVL14:
 271              	#NO_APP
 272              	.LBE38:
 273              	.LBE37:
 274              	.LBE27:
 275              	.LBE26:
 103:src/riscv.cpp ****     } else {
 104:src/riscv.cpp ****         //unexpected trap cause
 105:src/riscv.cpp ****         //print(scause) sta se desilo
 106:src/riscv.cpp ****         //print(sepc) gde se desio problem
 107:src/riscv.cpp ****         //print(stval) trap value, koji je scause
 108:src/riscv.cpp ****         printString("Cause: ");
 109:src/riscv.cpp ****         printInt(r_scause());
 110:src/riscv.cpp ****         printString("\nPC: ");
 111:src/riscv.cpp ****         printInt(r_sepc());
 112:src/riscv.cpp ****         printString("\nTrapVal: ");
 113:src/riscv.cpp ****         printInt(r_stval());
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****         while(1);
 116:src/riscv.cpp **** 
 117:src/riscv.cpp ****     }
 118:src/riscv.cpp **** 
 119:src/riscv.cpp **** }
 276              		.loc 1 119 1
 277 00e0 83308104 		ld	ra,72(sp)
 278              		.cfi_remember_state
 279              		.cfi_restore 1
 280 00e4 03340104 		ld	s0,64(sp)
 281              		.cfi_restore 8
 282              		.cfi_def_cfa 2, 80
 283 00e8 83348103 		ld	s1,56(sp)
 284              		.cfi_restore 9
 285              	.LVL15:
 286 00ec 03390103 		ld	s2,48(sp)
 287              		.cfi_restore 18
 288 00f0 83398102 		ld	s3,40(sp)
 289              		.cfi_restore 19
 290              	.LVL16:
 291 00f4 13010105 		addi	sp,sp,80
 292              		.cfi_def_cfa_offset 0
 293 00f8 67800000 		jr	ra
 294              	.LVL17:
 295              	.L12:
 296              		.cfi_restore_state
 297              	.LBB47:
 298              	.LBB40:
 299              	.LBB39:
 300              	.LBB34:
  41:src/riscv.cpp ****                 void* addr;
GAS LISTING /tmp/ccBf6xWB.s 			page 11


 301              		.loc 1 41 13 is_stmt 1
  42:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
 302              		.loc 1 42 17
  43:src/riscv.cpp **** //                MemoryAllocator::mem_free(addr);
 303              		.loc 1 43 17
  43:src/riscv.cpp **** //                MemoryAllocator::mem_free(addr);
 304              		.loc 1 43 59 is_stmt 0
 305              	#APP
 306              	# 43 "src/riscv.cpp" 1
 307              		mv a0, a1
 308              	# 0 "" 2
 309              	.LVL18:
  45:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ret));
 310              		.loc 1 45 17 is_stmt 1
  45:src/riscv.cpp ****                 __asm__ volatile("mv t0, %0" : : "r"(ret));
 311              		.loc 1 45 48 is_stmt 0
 312              	#NO_APP
 313 0100 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 313      E7800000 
 314              	.LVL19:
  46:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(fp)");
 315              		.loc 1 46 17 is_stmt 1
  46:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(fp)");
 316              		.loc 1 46 59 is_stmt 0
 317              	#APP
 318              	# 46 "src/riscv.cpp" 1
  47:src/riscv.cpp ****                 break;
 319              		mv t0, a0
 320              	# 0 "" 2
 321              		.loc 1 47 17 is_stmt 1
  47:src/riscv.cpp ****                 break;
 322              		.loc 1 47 51 is_stmt 0
 323              	# 47 "src/riscv.cpp" 1
  48:src/riscv.cpp ****             case 0x11: //thread_create(thread_t* handle, void(*body)(void*), void* arg)
 324              		sw t0, 80(fp)
 325              	# 0 "" 2
 326              		.loc 1 48 17 is_stmt 1
 327              	#NO_APP
 328 0110 6FF09FFC 		j	.L6
 329              	.LVL20:
 330              	.L11:
  49:src/riscv.cpp **** //                uint64 handle, body, arg, stack;
 331              		.loc 1 49 13
  51:src/riscv.cpp ****                 void(*body)(void*);
 332              		.loc 1 51 17
  52:src/riscv.cpp ****                 void* arg;
 333              		.loc 1 52 17
  53:src/riscv.cpp ****                 void *stack;
 334              		.loc 1 53 17
  54:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(handle));
 335              		.loc 1 54 17
  55:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r"(body));
 336              		.loc 1 55 17
  55:src/riscv.cpp ****                 __asm__ volatile("mv %0, a2" : "=r"(body));
 337              		.loc 1 55 61 is_stmt 0
 338              	#APP
 339              	# 55 "src/riscv.cpp" 1
GAS LISTING /tmp/ccBf6xWB.s 			page 12


 340              		mv s2, a1
 341              	# 0 "" 2
 342              	.LVL21:
  56:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6" : "=r"(arg));
 343              		.loc 1 56 17 is_stmt 1
  56:src/riscv.cpp ****                 __asm__ volatile("mv %0, a6" : "=r"(arg));
 344              		.loc 1 56 59 is_stmt 0
 345              	# 56 "src/riscv.cpp" 1
 346              		mv a1, a2
 347              	# 0 "" 2
 348              	.LVL22:
  57:src/riscv.cpp ****                 __asm__ volatile("mv %0, a7" : "=r"(stack));
 349              		.loc 1 57 17 is_stmt 1
  57:src/riscv.cpp ****                 __asm__ volatile("mv %0, a7" : "=r"(stack));
 350              		.loc 1 57 58 is_stmt 0
 351              	# 57 "src/riscv.cpp" 1
 352              		mv a2, a6
 353              	# 0 "" 2
 354              	.LVL23:
  58:src/riscv.cpp ****                 *handle = TCB::createThread(handle, body,arg, stack);
 355              		.loc 1 58 17 is_stmt 1
  58:src/riscv.cpp ****                 *handle = TCB::createThread(handle, body,arg, stack);
 356              		.loc 1 58 60 is_stmt 0
 357              	# 58 "src/riscv.cpp" 1
 358              		mv a3, a7
 359              	# 0 "" 2
 360              	.LVL24:
  59:src/riscv.cpp **** //                __asm__ volatile("mv t0, %0" : : "r"(ret));
 361              		.loc 1 59 17 is_stmt 1
  59:src/riscv.cpp **** //                __asm__ volatile("mv t0, %0" : : "r"(ret));
 362              		.loc 1 59 44 is_stmt 0
 363              	#NO_APP
 364 0124 13050900 		mv	a0,s2
 365 0128 97000000 		call	_ZN3TCB12createThreadEPPS_PFvPvES2_S2_@plt
 365      E7800000 
 366              	.LVL25:
  59:src/riscv.cpp **** //                __asm__ volatile("mv t0, %0" : : "r"(ret));
 367              		.loc 1 59 25
 368 0130 2330A900 		sd	a0,0(s2)
  61:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(fp)");
 369              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 __asm__ volatile ("sw t0, 80(fp)");
 370              		.loc 1 61 45 is_stmt 0
 371              	#APP
 372              	# 61 "src/riscv.cpp" 1
  62:src/riscv.cpp ****                 break;
 373              		li t0, 0
 374              	# 0 "" 2
 375              		.loc 1 62 17 is_stmt 1
  62:src/riscv.cpp ****                 break;
 376              		.loc 1 62 51 is_stmt 0
 377              	# 62 "src/riscv.cpp" 1
  63:src/riscv.cpp ****             case 0x12: //thread_exit()
 378              		sw t0, 80(fp)
 379              	# 0 "" 2
 380              		.loc 1 63 17 is_stmt 1
 381              	#NO_APP
GAS LISTING /tmp/ccBf6xWB.s 			page 13


 382 013c 6FF0DFF9 		j	.L6
 383              	.LVL26:
 384              	.L10:
  64:src/riscv.cpp ****                 TCB::threadExit();
 385              		.loc 1 64 13
  65:src/riscv.cpp ****                 break;
 386              		.loc 1 65 17
  65:src/riscv.cpp ****                 break;
 387              		.loc 1 65 32 is_stmt 0
 388 0140 97000000 		call	_ZN3TCB10threadExitEv@plt
 388      E7800000 
 389              	.LVL27:
  66:src/riscv.cpp ****             case 0x13: //thread_dispatch()
 390              		.loc 1 66 17 is_stmt 1
 391 0148 6FF01FF9 		j	.L6
 392              	.L9:
  67:src/riscv.cpp ****                 TCB::yield();
 393              		.loc 1 67 13
  68:src/riscv.cpp ****                 break;
 394              		.loc 1 68 17
  68:src/riscv.cpp ****                 break;
 395              		.loc 1 68 27 is_stmt 0
 396 014c 97000000 		call	_ZN3TCB5yieldEv@plt
 396      E7800000 
 397              	.LVL28:
  69:src/riscv.cpp ****             case 0x14: //thread_join()
 398              		.loc 1 69 17 is_stmt 1
 399 0154 6FF05FF8 		j	.L6
 400              	.L7:
  70:src/riscv.cpp ****                 thread_t handle_join;
 401              		.loc 1 70 13
  71:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(handle_join));
 402              		.loc 1 71 17
  72:src/riscv.cpp ****                 TCB::join(handle_join);
 403              		.loc 1 72 17
  72:src/riscv.cpp ****                 TCB::join(handle_join);
 404              		.loc 1 72 66 is_stmt 0
 405              	#APP
 406              	# 72 "src/riscv.cpp" 1
 407              		mv a0, a1
 408              	# 0 "" 2
 409              	.LVL29:
  73:src/riscv.cpp **** 
 410              		.loc 1 73 17 is_stmt 1
  73:src/riscv.cpp **** 
 411              		.loc 1 73 26 is_stmt 0
 412              	#NO_APP
 413 015c 97000000 		call	_ZN3TCB4joinEPS_@plt
 413      E7800000 
 414              	.LVL30:
  75:src/riscv.cpp ****             case 0x21: //sem_open(sem_t* handle, unsigned init)
 415              		.loc 1 75 17 is_stmt 1
 416 0164 6FF05FF7 		j	.L6
 417              	.LVL31:
 418              	.L14:
  86:src/riscv.cpp ****                  retval = __getc();
 419              		.loc 1 86 13
GAS LISTING /tmp/ccBf6xWB.s 			page 14


  87:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(retval));
 420              		.loc 1 87 18
  87:src/riscv.cpp ****                 __asm__ volatile ("mv t0, %0" : : "r"(retval));
 421              		.loc 1 87 33 is_stmt 0
 422 0168 97000000 		call	__getc@plt
 422      E7800000 
 423              	.LVL32:
  88:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(fp)");
 424              		.loc 1 88 17 is_stmt 1
  88:src/riscv.cpp ****                 __asm__ volatile("sw t0, 80(fp)");
 425              		.loc 1 88 63 is_stmt 0
 426              	#APP
 427              	# 88 "src/riscv.cpp" 1
  89:src/riscv.cpp ****                 break;
 428              		mv t0, a0
 429              	# 0 "" 2
 430              		.loc 1 89 17 is_stmt 1
  89:src/riscv.cpp ****                 break;
 431              		.loc 1 89 50 is_stmt 0
 432              	# 89 "src/riscv.cpp" 1
  90:src/riscv.cpp ****             case 0x42: //putc
 433              		sw t0, 80(fp)
 434              	# 0 "" 2
 435              		.loc 1 90 17 is_stmt 1
 436              	#NO_APP
 437 0178 6FF01FF6 		j	.L6
 438              	.LVL33:
 439              	.L4:
 440              	.LBE34:
 441              	.LBE39:
 442              	.LBE40:
 108:src/riscv.cpp ****         printInt(r_scause());
 443              		.loc 1 108 9
 108:src/riscv.cpp ****         printInt(r_scause());
 444              		.loc 1 108 20 is_stmt 0
 445 017c 17050000 		lla	a0,.LC0
 445      13050500 
 446 0184 97000000 		call	_Z11printStringPKc@plt
 446      E7800000 
 447              	.LVL34:
 109:src/riscv.cpp ****         printString("\nPC: ");
 448              		.loc 1 109 9 is_stmt 1
 449              	.LBB41:
 450              	.LBB42:
  70:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 451              		.loc 2 70 5
  71:src/../h/riscv.hpp ****     return scause;
 452              		.loc 2 71 5
  71:src/../h/riscv.hpp ****     return scause;
 453              		.loc 2 71 72 is_stmt 0
 454              	#APP
 455              	# 71 "src/../h/riscv.hpp" 1
 456              		csrr a5, scause
 457              	# 0 "" 2
 458              	#NO_APP
 459 0190 2334F4FC 		sd	a5,-56(s0)
  72:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccBf6xWB.s 			page 15


 460              		.loc 2 72 5 is_stmt 1
  72:src/../h/riscv.hpp **** }
 461              		.loc 2 72 12 is_stmt 0
 462 0194 033584FC 		ld	a0,-56(s0)
 463              	.LBE42:
 464              	.LBE41:
 109:src/riscv.cpp ****         printString("\nPC: ");
 465              		.loc 1 109 17
 466 0198 13060000 		li	a2,0
 467 019c 9305A000 		li	a1,10
 468 01a0 1B050500 		sext.w	a0,a0
 469 01a4 97000000 		call	_Z8printIntiii@plt
 469      E7800000 
 470              	.LVL35:
 110:src/riscv.cpp ****         printInt(r_sepc());
 471              		.loc 1 110 9 is_stmt 1
 110:src/riscv.cpp ****         printInt(r_sepc());
 472              		.loc 1 110 20 is_stmt 0
 473 01ac 17050000 		lla	a0,.LC1
 473      13050500 
 474 01b4 97000000 		call	_Z11printStringPKc@plt
 474      E7800000 
 475              	.LVL36:
 111:src/riscv.cpp ****         printString("\nTrapVal: ");
 476              		.loc 1 111 9 is_stmt 1
 477              	.LBB43:
 478              	.LBB44:
  80:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 479              		.loc 2 80 5
  81:src/../h/riscv.hpp ****     return sepc;
 480              		.loc 2 81 5
  81:src/../h/riscv.hpp ****     return sepc;
 481              		.loc 2 81 64 is_stmt 0
 482              	#APP
 483              	# 81 "src/../h/riscv.hpp" 1
 484              		csrr a5, sepc
 485              	# 0 "" 2
 486              	#NO_APP
 487 01c0 2330F4FC 		sd	a5,-64(s0)
  82:src/../h/riscv.hpp **** }
 488              		.loc 2 82 5 is_stmt 1
  82:src/../h/riscv.hpp **** }
 489              		.loc 2 82 12 is_stmt 0
 490 01c4 033504FC 		ld	a0,-64(s0)
 491              	.LBE44:
 492              	.LBE43:
 111:src/riscv.cpp ****         printString("\nTrapVal: ");
 493              		.loc 1 111 17
 494 01c8 13060000 		li	a2,0
 495 01cc 9305A000 		li	a1,10
 496 01d0 1B050500 		sext.w	a0,a0
 497 01d4 97000000 		call	_Z8printIntiii@plt
 497      E7800000 
 498              	.LVL37:
 112:src/riscv.cpp ****         printInt(r_stval());
 499              		.loc 1 112 9 is_stmt 1
 112:src/riscv.cpp ****         printInt(r_stval());
GAS LISTING /tmp/ccBf6xWB.s 			page 16


 500              		.loc 1 112 20 is_stmt 0
 501 01dc 17050000 		lla	a0,.LC2
 501      13050500 
 502 01e4 97000000 		call	_Z11printStringPKc@plt
 502      E7800000 
 503              	.LVL38:
 113:src/riscv.cpp **** 
 504              		.loc 1 113 9 is_stmt 1
 505              	.LBB45:
 506              	.LBB46:
 100:src/../h/riscv.hpp ****     __asm__ volatile("csrr %[stval], stval" : [stval] "=r"(stval));
 507              		.loc 2 100 5
 101:src/../h/riscv.hpp ****     return stval;
 508              		.loc 2 101 5
 101:src/../h/riscv.hpp ****     return stval;
 509              		.loc 2 101 67 is_stmt 0
 510              	#APP
 511              	# 101 "src/../h/riscv.hpp" 1
 512              		csrr a5, stval
 513              	# 0 "" 2
 514              	#NO_APP
 515 01f0 233CF4FA 		sd	a5,-72(s0)
 102:src/../h/riscv.hpp **** }
 516              		.loc 2 102 5 is_stmt 1
 102:src/../h/riscv.hpp **** }
 517              		.loc 2 102 12 is_stmt 0
 518 01f4 033584FB 		ld	a0,-72(s0)
 519              	.LBE46:
 520              	.LBE45:
 113:src/riscv.cpp **** 
 521              		.loc 1 113 17
 522 01f8 13060000 		li	a2,0
 523 01fc 9305A000 		li	a1,10
 524 0200 1B050500 		sext.w	a0,a0
 525 0204 97000000 		call	_Z8printIntiii@plt
 525      E7800000 
 526              	.LVL39:
 527              	.L16:
 115:src/riscv.cpp **** 
 528              		.loc 1 115 9 is_stmt 1 discriminator 1
 115:src/riscv.cpp **** 
 529              		.loc 1 115 9 discriminator 1
 530 020c 6F000000 		j	.L16
 531              	.LBE47:
 532              		.cfi_endproc
 533              	.LFE39:
 535              		.align	2
 536              		.globl	_ZN5Riscv21timerInterruptHandlerEv
 538              	_ZN5Riscv21timerInterruptHandlerEv:
 539              	.LFB40:
 120:src/riscv.cpp **** 
 121:src/riscv.cpp **** void Riscv::timerInterruptHandler() {
 540              		.loc 1 121 37
 541              		.cfi_startproc
 542 0210 130101FF 		addi	sp,sp,-16
 543              		.cfi_def_cfa_offset 16
 544 0214 23348100 		sd	s0,8(sp)
GAS LISTING /tmp/ccBf6xWB.s 			page 17


 545              		.cfi_offset 8, -8
 546 0218 13040101 		addi	s0,sp,16
 547              		.cfi_def_cfa 8, 0
 122:src/riscv.cpp ****     mc_sip(SIP_SSIP);
 548              		.loc 1 122 5
 549              	.LVL40:
 550              	.LBB48:
 551              	.LBB49:
 114:src/../h/riscv.hpp **** }
 552              		.loc 2 114 5
 114:src/../h/riscv.hpp **** }
 553              		.loc 2 114 64 is_stmt 0
 554 021c 93072000 		li	a5,2
 555              	#APP
 556              	# 114 "src/../h/riscv.hpp" 1
 557              		csrc sip, a5
 558              	# 0 "" 2
 559              	.LVL41:
 560              	#NO_APP
 561              	.LBE49:
 562              	.LBE48:
 123:src/riscv.cpp ****     /*
 124:src/riscv.cpp ****      * // interrupt: yes, cause code: supervisor software interrupt (timer)
 125:src/riscv.cpp ****         TCB::timesliceCounter++; //ovo se odnosi na running nit
 126:src/riscv.cpp ****         if(TCB::timesliceCounter >= TCB::running->getTimeslice()){
 127:src/riscv.cpp ****             uint64 sepc = r_sepc(); //sacuvan sepc na steku prve niti
 128:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 129:src/riscv.cpp ****             TCB::timesliceCounter = 0; //ova nit ce biti novi running
 130:src/riscv.cpp ****             TCB::dispatch();
 131:src/riscv.cpp ****             w_sstatus(sstatus);
 132:src/riscv.cpp ****             w_sepc(sepc); //sepc je ovde sepc druge niti iz dispatcha (koja je prvobitno u sepc ura
 133:src/riscv.cpp **** 
 134:src/riscv.cpp ****         }
 135:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 136:src/riscv.cpp **** 
 137:src/riscv.cpp ****      */
 138:src/riscv.cpp **** }
 563              		.loc 1 138 1
 564 0224 03348100 		ld	s0,8(sp)
 565              		.cfi_restore 8
 566              		.cfi_def_cfa 2, 16
 567 0228 13010101 		addi	sp,sp,16
 568              		.cfi_def_cfa_offset 0
 569 022c 67800000 		jr	ra
 570              		.cfi_endproc
 571              	.LFE40:
 573              		.align	2
 574              		.globl	_ZN5Riscv23consoleInterruptHandlerEv
 576              	_ZN5Riscv23consoleInterruptHandlerEv:
 577              	.LFB41:
 139:src/riscv.cpp **** 
 140:src/riscv.cpp **** 
 141:src/riscv.cpp **** void Riscv::consoleInterruptHandler() {
 578              		.loc 1 141 39 is_stmt 1
 579              		.cfi_startproc
 580 0230 130101FF 		addi	sp,sp,-16
 581              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccBf6xWB.s 			page 18


 582 0234 23341100 		sd	ra,8(sp)
 583 0238 23308100 		sd	s0,0(sp)
 584              		.cfi_offset 1, -8
 585              		.cfi_offset 8, -16
 586 023c 13040101 		addi	s0,sp,16
 587              		.cfi_def_cfa 8, 0
 142:src/riscv.cpp ****     console_handler();
 588              		.loc 1 142 5
 589              		.loc 1 142 20 is_stmt 0
 590 0240 97000000 		call	console_handler@plt
 590      E7800000 
 591              	.LVL42:
 143:src/riscv.cpp **** }...
 592              		.loc 1 143 1
 593 0248 83308100 		ld	ra,8(sp)
 594              		.cfi_restore 1
 595 024c 03340100 		ld	s0,0(sp)
 596              		.cfi_restore 8
 597              		.cfi_def_cfa 2, 16
 598 0250 13010101 		addi	sp,sp,16
 599              		.cfi_def_cfa_offset 0
 600 0254 67800000 		jr	ra
 601              		.cfi_endproc
 602              	.LFE41:
 604              	.Letext0:
 605              		.file 3 "src/../h/../lib/hw.h"
 606              		.file 4 "src/../h/MemoryAllocator.hpp"
 607              		.file 5 "src/../h/list.hpp"
 608              		.file 6 "src/../h/tcb.hpp"
 609              		.file 7 "src/../h/syscall_c.hpp"
 610              		.file 8 "src/../lib/console.h"
 611              		.file 9 "src/../test/printing.hpp"
GAS LISTING /tmp/ccBf6xWB.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccBf6xWB.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccBf6xWB.s:13     .text:0000000000000000 .L0 
     /tmp/ccBf6xWB.s:14     .text:0000000000000000 .L0 
     /tmp/ccBf6xWB.s:15     .text:0000000000000004 .L0 
     /tmp/ccBf6xWB.s:17     .text:0000000000000008 .L0 
     /tmp/ccBf6xWB.s:19     .text:000000000000000c .L0 
     /tmp/ccBf6xWB.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccBf6xWB.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccBf6xWB.s:33     .text:0000000000000014 .L0 
     /tmp/ccBf6xWB.s:34     .text:0000000000000018 .L0 
     /tmp/ccBf6xWB.s:35     .text:0000000000000018 .L0 
     /tmp/ccBf6xWB.s:37     .text:000000000000001c .L0 
     /tmp/ccBf6xWB.s:39     .text:0000000000000020 .L0 
     /tmp/ccBf6xWB.s:56     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccBf6xWB.s:59     .text:0000000000000020 .L0 
     /tmp/ccBf6xWB.s:60     .text:0000000000000020 .L0 
     /tmp/ccBf6xWB.s:61     .text:0000000000000024 .L0 
     /tmp/ccBf6xWB.s:67     .text:0000000000000038 .L0 
     /tmp/ccBf6xWB.s:68     .text:0000000000000038 .L0 
     /tmp/ccBf6xWB.s:69     .text:0000000000000038 .L0 
     /tmp/ccBf6xWB.s:70     .text:0000000000000038 .L0 
     /tmp/ccBf6xWB.s:71     .text:0000000000000038 .L0 
     /tmp/ccBf6xWB.s:73     .text:000000000000003c .L0 
     /tmp/ccBf6xWB.s:78     .text:000000000000003c .L0 
     /tmp/ccBf6xWB.s:79     .text:000000000000003c .L0 
     /tmp/ccBf6xWB.s:80     .text:000000000000003c .L0 
  src/../h/riscv.hpp:71     .text:000000000000003c .L0 
     /tmp/ccBf6xWB.s:88     .text:0000000000000044 .L0 
     /tmp/ccBf6xWB.s:89     .text:0000000000000044 .L0 
     /tmp/ccBf6xWB.s:95     .text:0000000000000048 .L0 
     /tmp/ccBf6xWB.s:96     .text:0000000000000048 .L0 
     /tmp/ccBf6xWB.s:99     .text:000000000000004c .L0 
     /tmp/ccBf6xWB.s:105    .text:0000000000000054 .L0 
     /tmp/ccBf6xWB.s:106    .text:0000000000000054 .L0 
     /tmp/ccBf6xWB.s:107    .text:0000000000000054 .L0 
  src/../h/riscv.hpp:81     .text:0000000000000054 .L0 
     /tmp/ccBf6xWB.s:116    .text:000000000000005c .L0 
     /tmp/ccBf6xWB.s:117    .text:000000000000005c .L0 
     /tmp/ccBf6xWB.s:121    .text:0000000000000060 .L0 
     /tmp/ccBf6xWB.s:126    .text:0000000000000064 .L0 
     /tmp/ccBf6xWB.s:127    .text:0000000000000064 .L0 
     /tmp/ccBf6xWB.s:128    .text:0000000000000064 .L0 
  src/../h/riscv.hpp:127    .text:0000000000000064 .L0 
     /tmp/ccBf6xWB.s:136    .text:000000000000006c .L0 
     /tmp/ccBf6xWB.s:137    .text:000000000000006c .L0 
     /tmp/ccBf6xWB.s:142    .text:0000000000000070 .L0 
     /tmp/ccBf6xWB.s:143    .text:0000000000000070 .L0 
       src/riscv.cpp:26     .text:0000000000000070 .L0 
     /tmp/ccBf6xWB.s:150    .text:0000000000000074 .L0 
     /tmp/ccBf6xWB.s:151    .text:0000000000000074 .L0 
     /tmp/ccBf6xWB.s:154    .text:0000000000000074 .L0 
     /tmp/ccBf6xWB.s:199    .text:00000000000000b0 .L0 
     /tmp/ccBf6xWB.s:200    .text:00000000000000b0 .L0 
GAS LISTING /tmp/ccBf6xWB.s 			page 20


     /tmp/ccBf6xWB.s:201    .text:00000000000000b0 .L0 
       src/riscv.cpp:93     .text:00000000000000b0 .L0 
     /tmp/ccBf6xWB.s:208    .text:00000000000000b4 .L0 
     /tmp/ccBf6xWB.s:210    .text:00000000000000b4 .L0 
     /tmp/ccBf6xWB.s:214    .text:00000000000000c0 .L0 
     /tmp/ccBf6xWB.s:217    .text:00000000000000c4 .L0 
     /tmp/ccBf6xWB.s:218    .text:00000000000000c4 .L0 
     /tmp/ccBf6xWB.s:219    .text:00000000000000c4 .L0 
     /tmp/ccBf6xWB.s:220    .text:00000000000000c4 .L0 
       src/riscv.cpp:34     .text:00000000000000c4 .L0 
     /tmp/ccBf6xWB.s:227    .text:00000000000000c8 .L0 
     /tmp/ccBf6xWB.s:229    .text:00000000000000c8 .L0 
     /tmp/ccBf6xWB.s:232    .text:00000000000000d0 .L0 
       src/riscv.cpp:38     .text:00000000000000d0 .L0 
     /tmp/ccBf6xWB.s:238    .text:00000000000000d4 .L0 
       src/riscv.cpp:39     .text:00000000000000d4 .L0 
     /tmp/ccBf6xWB.s:248    .text:00000000000000d8 .L0 
     /tmp/ccBf6xWB.s:251    .text:00000000000000d8 .L0 
     /tmp/ccBf6xWB.s:252    .text:00000000000000d8 .L0 
  src/../h/riscv.hpp:131    .text:00000000000000d8 .L0 
     /tmp/ccBf6xWB.s:264    .text:00000000000000dc .L0 
     /tmp/ccBf6xWB.s:265    .text:00000000000000dc .L0 
  src/../h/riscv.hpp:86     .text:00000000000000dc .L0 
     /tmp/ccBf6xWB.s:277    .text:00000000000000e0 .L0 
     /tmp/ccBf6xWB.s:278    .text:00000000000000e4 .L0 
     /tmp/ccBf6xWB.s:279    .text:00000000000000e4 .L0 
     /tmp/ccBf6xWB.s:281    .text:00000000000000e8 .L0 
     /tmp/ccBf6xWB.s:282    .text:00000000000000e8 .L0 
     /tmp/ccBf6xWB.s:284    .text:00000000000000ec .L0 
     /tmp/ccBf6xWB.s:287    .text:00000000000000f0 .L0 
     /tmp/ccBf6xWB.s:289    .text:00000000000000f4 .L0 
     /tmp/ccBf6xWB.s:292    .text:00000000000000f8 .L0 
     /tmp/ccBf6xWB.s:296    .text:00000000000000fc .L0 
     /tmp/ccBf6xWB.s:302    .text:00000000000000fc .L0 
     /tmp/ccBf6xWB.s:303    .text:00000000000000fc .L0 
     /tmp/ccBf6xWB.s:304    .text:00000000000000fc .L0 
       src/riscv.cpp:43     .text:00000000000000fc .L0 
     /tmp/ccBf6xWB.s:311    .text:0000000000000100 .L0 
     /tmp/ccBf6xWB.s:313    .text:0000000000000100 .L0 
     /tmp/ccBf6xWB.s:316    .text:0000000000000108 .L0 
       src/riscv.cpp:46     .text:0000000000000108 .L0 
     /tmp/ccBf6xWB.s:322    .text:000000000000010c .L0 
       src/riscv.cpp:47     .text:000000000000010c .L0 
     /tmp/ccBf6xWB.s:328    .text:0000000000000110 .L0 
     /tmp/ccBf6xWB.s:332    .text:0000000000000114 .L0 
     /tmp/ccBf6xWB.s:333    .text:0000000000000114 .L0 
     /tmp/ccBf6xWB.s:334    .text:0000000000000114 .L0 
     /tmp/ccBf6xWB.s:335    .text:0000000000000114 .L0 
     /tmp/ccBf6xWB.s:336    .text:0000000000000114 .L0 
     /tmp/ccBf6xWB.s:337    .text:0000000000000114 .L0 
       src/riscv.cpp:55     .text:0000000000000114 .L0 
     /tmp/ccBf6xWB.s:344    .text:0000000000000118 .L0 
       src/riscv.cpp:56     .text:0000000000000118 .L0 
     /tmp/ccBf6xWB.s:350    .text:000000000000011c .L0 
       src/riscv.cpp:57     .text:000000000000011c .L0 
     /tmp/ccBf6xWB.s:356    .text:0000000000000120 .L0 
       src/riscv.cpp:58     .text:0000000000000120 .L0 
GAS LISTING /tmp/ccBf6xWB.s 			page 21


     /tmp/ccBf6xWB.s:362    .text:0000000000000124 .L0 
     /tmp/ccBf6xWB.s:364    .text:0000000000000124 .L0 
     /tmp/ccBf6xWB.s:368    .text:0000000000000130 .L0 
     /tmp/ccBf6xWB.s:370    .text:0000000000000134 .L0 
       src/riscv.cpp:61     .text:0000000000000134 .L0 
     /tmp/ccBf6xWB.s:376    .text:0000000000000138 .L0 
       src/riscv.cpp:62     .text:0000000000000138 .L0 
     /tmp/ccBf6xWB.s:382    .text:000000000000013c .L0 
     /tmp/ccBf6xWB.s:386    .text:0000000000000140 .L0 
     /tmp/ccBf6xWB.s:387    .text:0000000000000140 .L0 
     /tmp/ccBf6xWB.s:388    .text:0000000000000140 .L0 
     /tmp/ccBf6xWB.s:391    .text:0000000000000148 .L0 
     /tmp/ccBf6xWB.s:394    .text:000000000000014c .L0 
     /tmp/ccBf6xWB.s:395    .text:000000000000014c .L0 
     /tmp/ccBf6xWB.s:396    .text:000000000000014c .L0 
     /tmp/ccBf6xWB.s:399    .text:0000000000000154 .L0 
     /tmp/ccBf6xWB.s:402    .text:0000000000000158 .L0 
     /tmp/ccBf6xWB.s:403    .text:0000000000000158 .L0 
     /tmp/ccBf6xWB.s:404    .text:0000000000000158 .L0 
       src/riscv.cpp:72     .text:0000000000000158 .L0 
     /tmp/ccBf6xWB.s:411    .text:000000000000015c .L0 
     /tmp/ccBf6xWB.s:413    .text:000000000000015c .L0 
     /tmp/ccBf6xWB.s:416    .text:0000000000000164 .L0 
     /tmp/ccBf6xWB.s:420    .text:0000000000000168 .L0 
     /tmp/ccBf6xWB.s:421    .text:0000000000000168 .L0 
     /tmp/ccBf6xWB.s:422    .text:0000000000000168 .L0 
     /tmp/ccBf6xWB.s:425    .text:0000000000000170 .L0 
       src/riscv.cpp:88     .text:0000000000000170 .L0 
     /tmp/ccBf6xWB.s:431    .text:0000000000000174 .L0 
       src/riscv.cpp:89     .text:0000000000000174 .L0 
     /tmp/ccBf6xWB.s:437    .text:0000000000000178 .L0 
     /tmp/ccBf6xWB.s:444    .text:000000000000017c .L0 
     /tmp/ccBf6xWB.s:445    .text:000000000000017c .L0 
     /tmp/ccBf6xWB.s:451    .text:000000000000018c .L0 
     /tmp/ccBf6xWB.s:452    .text:000000000000018c .L0 
     /tmp/ccBf6xWB.s:453    .text:000000000000018c .L0 
  src/../h/riscv.hpp:71     .text:000000000000018c .L0 
     /tmp/ccBf6xWB.s:461    .text:0000000000000194 .L0 
     /tmp/ccBf6xWB.s:462    .text:0000000000000194 .L0 
     /tmp/ccBf6xWB.s:466    .text:0000000000000198 .L0 
     /tmp/ccBf6xWB.s:472    .text:00000000000001ac .L0 
     /tmp/ccBf6xWB.s:473    .text:00000000000001ac .L0 
     /tmp/ccBf6xWB.s:479    .text:00000000000001bc .L0 
     /tmp/ccBf6xWB.s:480    .text:00000000000001bc .L0 
     /tmp/ccBf6xWB.s:481    .text:00000000000001bc .L0 
  src/../h/riscv.hpp:81     .text:00000000000001bc .L0 
     /tmp/ccBf6xWB.s:489    .text:00000000000001c4 .L0 
     /tmp/ccBf6xWB.s:490    .text:00000000000001c4 .L0 
     /tmp/ccBf6xWB.s:494    .text:00000000000001c8 .L0 
     /tmp/ccBf6xWB.s:500    .text:00000000000001dc .L0 
     /tmp/ccBf6xWB.s:501    .text:00000000000001dc .L0 
     /tmp/ccBf6xWB.s:507    .text:00000000000001ec .L0 
     /tmp/ccBf6xWB.s:508    .text:00000000000001ec .L0 
     /tmp/ccBf6xWB.s:509    .text:00000000000001ec .L0 
  src/../h/riscv.hpp:101    .text:00000000000001ec .L0 
     /tmp/ccBf6xWB.s:517    .text:00000000000001f4 .L0 
     /tmp/ccBf6xWB.s:518    .text:00000000000001f4 .L0 
GAS LISTING /tmp/ccBf6xWB.s 			page 22


     /tmp/ccBf6xWB.s:522    .text:00000000000001f8 .L0 
     /tmp/ccBf6xWB.s:529    .text:000000000000020c .L0 
     /tmp/ccBf6xWB.s:530    .text:000000000000020c .L0 
     /tmp/ccBf6xWB.s:532    .text:0000000000000210 .L0 
     /tmp/ccBf6xWB.s:538    .text:0000000000000210 _ZN5Riscv21timerInterruptHandlerEv
     /tmp/ccBf6xWB.s:541    .text:0000000000000210 .L0 
     /tmp/ccBf6xWB.s:542    .text:0000000000000210 .L0 
     /tmp/ccBf6xWB.s:543    .text:0000000000000214 .L0 
     /tmp/ccBf6xWB.s:545    .text:0000000000000218 .L0 
     /tmp/ccBf6xWB.s:547    .text:000000000000021c .L0 
     /tmp/ccBf6xWB.s:552    .text:000000000000021c .L0 
     /tmp/ccBf6xWB.s:553    .text:000000000000021c .L0 
     /tmp/ccBf6xWB.s:554    .text:000000000000021c .L0 
     /tmp/ccBf6xWB.s:564    .text:0000000000000224 .L0 
     /tmp/ccBf6xWB.s:565    .text:0000000000000228 .L0 
     /tmp/ccBf6xWB.s:566    .text:0000000000000228 .L0 
     /tmp/ccBf6xWB.s:568    .text:000000000000022c .L0 
     /tmp/ccBf6xWB.s:570    .text:0000000000000230 .L0 
     /tmp/ccBf6xWB.s:576    .text:0000000000000230 _ZN5Riscv23consoleInterruptHandlerEv
     /tmp/ccBf6xWB.s:579    .text:0000000000000230 .L0 
     /tmp/ccBf6xWB.s:580    .text:0000000000000230 .L0 
     /tmp/ccBf6xWB.s:581    .text:0000000000000234 .L0 
     /tmp/ccBf6xWB.s:584    .text:000000000000023c .L0 
     /tmp/ccBf6xWB.s:585    .text:000000000000023c .L0 
     /tmp/ccBf6xWB.s:587    .text:0000000000000240 .L0 
     /tmp/ccBf6xWB.s:589    .text:0000000000000240 .L0 
     /tmp/ccBf6xWB.s:590    .text:0000000000000240 .L0 
     /tmp/ccBf6xWB.s:593    .text:0000000000000248 .L0 
     /tmp/ccBf6xWB.s:594    .text:000000000000024c .L0 
     /tmp/ccBf6xWB.s:596    .text:0000000000000250 .L0 
     /tmp/ccBf6xWB.s:597    .text:0000000000000250 .L0 
     /tmp/ccBf6xWB.s:599    .text:0000000000000254 .L0 
     /tmp/ccBf6xWB.s:601    .text:0000000000000258 .L0 
     /tmp/ccBf6xWB.s:612    .text:0000000000000258 .L0 
     /tmp/ccBf6xWB.s:168    .rodata:0000000000000000 .L8
     /tmp/ccBf6xWB.s:160    .text:0000000000000088 .L0 
     /tmp/ccBf6xWB.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccBf6xWB.s:445    .text:000000000000017c .L0 
     /tmp/ccBf6xWB.s:47     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccBf6xWB.s:473    .text:00000000000001ac .L0 
     /tmp/ccBf6xWB.s:50     .rodata.str1.8:0000000000000010 .LC2
     /tmp/ccBf6xWB.s:501    .text:00000000000001dc .L0 
     /tmp/ccBf6xWB.s:439    .text:000000000000017c .L4
     /tmp/ccBf6xWB.s:192    .text:00000000000000a0 .L5
     /tmp/ccBf6xWB.s:245    .text:00000000000000d8 .L6
     /tmp/ccBf6xWB.s:418    .text:0000000000000168 .L14
     /tmp/ccBf6xWB.s:527    .text:000000000000020c .L16
     /tmp/ccBf6xWB.s:215    .text:00000000000000c4 .L13
     /tmp/ccBf6xWB.s:295    .text:00000000000000fc .L12
     /tmp/ccBf6xWB.s:330    .text:0000000000000114 .L11
     /tmp/ccBf6xWB.s:384    .text:0000000000000140 .L10
     /tmp/ccBf6xWB.s:392    .text:000000000000014c .L9
     /tmp/ccBf6xWB.s:400    .text:0000000000000158 .L7
     /tmp/ccBf6xWB.s:2163   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccBf6xWB.s:3616   .debug_str:00000000000008c9 .LASF168
     /tmp/ccBf6xWB.s:3660   .debug_str:0000000000000ae3 .LASF169
     /tmp/ccBf6xWB.s:3432   .debug_str:0000000000000372 .LASF170
GAS LISTING /tmp/ccBf6xWB.s 			page 23


     /tmp/ccBf6xWB.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccBf6xWB.s:604    .text:0000000000000258 .Letext0
     /tmp/ccBf6xWB.s:3328   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccBf6xWB.s:3452   .debug_str:0000000000000406 .LASF0
     /tmp/ccBf6xWB.s:3478   .debug_str:00000000000004c3 .LASF1
     /tmp/ccBf6xWB.s:3566   .debug_str:000000000000079b .LASF2
     /tmp/ccBf6xWB.s:3576   .debug_str:00000000000007e3 .LASF4
     /tmp/ccBf6xWB.s:3462   .debug_str:000000000000044c .LASF3
     /tmp/ccBf6xWB.s:3346   .debug_str:0000000000000099 .LASF5
     /tmp/ccBf6xWB.s:3530   .debug_str:0000000000000664 .LASF6
     /tmp/ccBf6xWB.s:3470   .debug_str:0000000000000493 .LASF7
     /tmp/ccBf6xWB.s:3430   .debug_str:0000000000000362 .LASF8
     /tmp/ccBf6xWB.s:3438   .debug_str:00000000000003ac .LASF9
     /tmp/ccBf6xWB.s:3374   .debug_str:0000000000000179 .LASF10
     /tmp/ccBf6xWB.s:3422   .debug_str:0000000000000315 .LASF11
     /tmp/ccBf6xWB.s:3388   .debug_str:00000000000001db .LASF12
     /tmp/ccBf6xWB.s:3372   .debug_str:0000000000000169 .LASF13
     /tmp/ccBf6xWB.s:3600   .debug_str:000000000000087c .LASF14
     /tmp/ccBf6xWB.s:3410   .debug_str:000000000000029b .LASF15
     /tmp/ccBf6xWB.s:3588   .debug_str:0000000000000832 .LASF16
     /tmp/ccBf6xWB.s:3648   .debug_str:0000000000000a84 .LASF62
     /tmp/ccBf6xWB.s:3550   .debug_str:000000000000072e .LASF171
     /tmp/ccBf6xWB.s:3482   .debug_str:00000000000004dc .LASF17
     /tmp/ccBf6xWB.s:3414   .debug_str:00000000000002cd .LASF18
     /tmp/ccBf6xWB.s:3664   .debug_str:0000000000000afd .LASF19
     /tmp/ccBf6xWB.s:3442   .debug_str:00000000000003c4 .LASF68
     /tmp/ccBf6xWB.s:3450   .debug_str:00000000000003ee .LASF70
     /tmp/ccBf6xWB.s:3630   .debug_str:0000000000000a08 .LASF20
     /tmp/ccBf6xWB.s:3626   .debug_str:00000000000009dc .LASF22
     /tmp/ccBf6xWB.s:3562   .debug_str:0000000000000787 .LASF24
     /tmp/ccBf6xWB.s:3520   .debug_str:000000000000061a .LASF26
     /tmp/ccBf6xWB.s:3542   .debug_str:00000000000006e7 .LASF21
     /tmp/ccBf6xWB.s:3544   .debug_str:00000000000006ee .LASF23
     /tmp/ccBf6xWB.s:3516   .debug_str:00000000000005ff .LASF25
     /tmp/ccBf6xWB.s:3472   .debug_str:00000000000004a6 .LASF27
     /tmp/ccBf6xWB.s:3658   .debug_str:0000000000000adb .LASF28
     /tmp/ccBf6xWB.s:3620   .debug_str:0000000000000992 .LASF29
     /tmp/ccBf6xWB.s:3512   .debug_str:00000000000005f2 .LASF30
     /tmp/ccBf6xWB.s:3518   .debug_str:0000000000000606 .LASF31
     /tmp/ccBf6xWB.s:3490   .debug_str:0000000000000534 .LASF32
     /tmp/ccBf6xWB.s:3548   .debug_str:000000000000071a .LASF33
     /tmp/ccBf6xWB.s:3684   .debug_str:0000000000000bb0 .LASF34
     /tmp/ccBf6xWB.s:3456   .debug_str:0000000000000419 .LASF35
     /tmp/ccBf6xWB.s:3596   .debug_str:0000000000000868 .LASF36
     /tmp/ccBf6xWB.s:3578   .debug_str:00000000000007ea .LASF37
     /tmp/ccBf6xWB.s:3580   .debug_str:00000000000007fd .LASF38
     /tmp/ccBf6xWB.s:3378   .debug_str:000000000000018d .LASF39
     /tmp/ccBf6xWB.s:3408   .debug_str:0000000000000295 .LASF40
     /tmp/ccBf6xWB.s:3446   .debug_str:00000000000003d6 .LASF41
     /tmp/ccBf6xWB.s:3454   .debug_str:0000000000000413 .LASF42
     /tmp/ccBf6xWB.s:3404   .debug_str:0000000000000274 .LASF43
     /tmp/ccBf6xWB.s:3348   .debug_str:00000000000000a0 .LASF44
     /tmp/ccBf6xWB.s:3572   .debug_str:00000000000007c0 .LASF45
     /tmp/ccBf6xWB.s:3564   .debug_str:0000000000000790 .LASF46
     /tmp/ccBf6xWB.s:3678   .debug_str:0000000000000b78 .LASF47
     /tmp/ccBf6xWB.s:3650   .debug_str:0000000000000a8a .LASF48
     /tmp/ccBf6xWB.s:3668   .debug_str:0000000000000b0d .LASF49
GAS LISTING /tmp/ccBf6xWB.s 			page 24


     /tmp/ccBf6xWB.s:3642   .debug_str:0000000000000a43 .LASF50
     /tmp/ccBf6xWB.s:3502   .debug_str:0000000000000592 .LASF51
     /tmp/ccBf6xWB.s:3536   .debug_str:000000000000068a .LASF52
     /tmp/ccBf6xWB.s:3468   .debug_str:0000000000000471 .LASF54
     /tmp/ccBf6xWB.s:3546   .debug_str:0000000000000701 .LASF53
     /tmp/ccBf6xWB.s:3402   .debug_str:000000000000024e .LASF55
     /tmp/ccBf6xWB.s:3554   .debug_str:000000000000073e .LASF56
     /tmp/ccBf6xWB.s:3400   .debug_str:000000000000022b .LASF57
     /tmp/ccBf6xWB.s:3654   .debug_str:0000000000000a9c .LASF58
     /tmp/ccBf6xWB.s:3488   .debug_str:000000000000050f .LASF59
     /tmp/ccBf6xWB.s:3670   .debug_str:0000000000000b23 .LASF84
     /tmp/ccBf6xWB.s:3376   .debug_str:0000000000000188 .LASF60
     /tmp/ccBf6xWB.s:3610   .debug_str:00000000000008aa .LASF61
     /tmp/ccBf6xWB.s:3524   .debug_str:0000000000000634 .LASF63
     /tmp/ccBf6xWB.s:3558   .debug_str:000000000000076b .LASF64
     /tmp/ccBf6xWB.s:3486   .debug_str:00000000000004fe .LASF65
     /tmp/ccBf6xWB.s:3458   .debug_str:000000000000042d .LASF66
     /tmp/ccBf6xWB.s:3538   .debug_str:000000000000069f .LASF67
     /tmp/ccBf6xWB.s:3394   .debug_str:00000000000001fe .LASF90
     /tmp/ccBf6xWB.s:3342   .debug_str:0000000000000052 .LASF92
     /tmp/ccBf6xWB.s:3662   .debug_str:0000000000000af1 .LASF69
     /tmp/ccBf6xWB.s:3506   .debug_str:00000000000005b2 .LASF71
     /tmp/ccBf6xWB.s:3504   .debug_str:00000000000005a8 .LASF72
     /tmp/ccBf6xWB.s:3350   .debug_str:00000000000000ab .LASF74
     /tmp/ccBf6xWB.s:3604   .debug_str:0000000000000891 .LASF73
     /tmp/ccBf6xWB.s:3420   .debug_str:00000000000002f4 .LASF75
     /tmp/ccBf6xWB.s:3460   .debug_str:0000000000000437 .LASF76
     /tmp/ccBf6xWB.s:3622   .debug_str:00000000000009a6 .LASF77
     /tmp/ccBf6xWB.s:3406   .debug_str:0000000000000286 .LASF78
     /tmp/ccBf6xWB.s:3656   .debug_str:0000000000000ab4 .LASF79
     /tmp/ccBf6xWB.s:3440   .debug_str:00000000000003ba .LASF80
     /tmp/ccBf6xWB.s:3426   .debug_str:0000000000000335 .LASF81
     /tmp/ccBf6xWB.s:3608   .debug_str:00000000000008a5 .LASF82
     /tmp/ccBf6xWB.s:3534   .debug_str:0000000000000680 .LASF83
     /tmp/ccBf6xWB.s:3632   .debug_str:0000000000000a11 .LASF85
     /tmp/ccBf6xWB.s:3474   .debug_str:00000000000004b9 .LASF86
     /tmp/ccBf6xWB.s:3676   .debug_str:0000000000000b59 .LASF87
     /tmp/ccBf6xWB.s:3680   .debug_str:0000000000000b90 .LASF88
     /tmp/ccBf6xWB.s:3356   .debug_str:00000000000000ee .LASF89
     /tmp/ccBf6xWB.s:3336   .debug_str:0000000000000011 .LASF91
     /tmp/ccBf6xWB.s:3646   .debug_str:0000000000000a6b .LASF93
     /tmp/ccBf6xWB.s:3366   .debug_str:000000000000013b .LASF94
     /tmp/ccBf6xWB.s:3352   .debug_str:00000000000000cc .LASF95
     /tmp/ccBf6xWB.s:3586   .debug_str:000000000000081f .LASF131
     /tmp/ccBf6xWB.s:3370   .debug_str:0000000000000150 .LASF172
     /tmp/ccBf6xWB.s:3594   .debug_str:0000000000000863 .LASF96
     /tmp/ccBf6xWB.s:3514   .debug_str:00000000000005fa .LASF97
     /tmp/ccBf6xWB.s:3508   .debug_str:00000000000005d6 .LASF98
     /tmp/ccBf6xWB.s:3590   .debug_str:0000000000000848 .LASF99
     /tmp/ccBf6xWB.s:3418   .debug_str:00000000000002dd .LASF105
     /tmp/ccBf6xWB.s:3570   .debug_str:00000000000007b6 .LASF173
     /tmp/ccBf6xWB.s:3556   .debug_str:0000000000000754 .LASF174
     /tmp/ccBf6xWB.s:3358   .debug_str:0000000000000106 .LASF100
     /tmp/ccBf6xWB.s:3362   .debug_str:0000000000000117 .LASF101
     /tmp/ccBf6xWB.s:3492   .debug_str:000000000000053c .LASF102
     /tmp/ccBf6xWB.s:3412   .debug_str:00000000000002b1 .LASF103
     /tmp/ccBf6xWB.s:3526   .debug_str:0000000000000644 .LASF104
GAS LISTING /tmp/ccBf6xWB.s 			page 25


     /tmp/ccBf6xWB.s:3644   .debug_str:0000000000000a4d .LASF106
     /tmp/ccBf6xWB.s:3330   .debug_str:0000000000000000 .LASF107
     /tmp/ccBf6xWB.s:3638   .debug_str:0000000000000a23 .LASF108
     /tmp/ccBf6xWB.s:3686   .debug_str:0000000000000bb8 .LASF109
     /tmp/ccBf6xWB.s:3674   .debug_str:0000000000000b3e .LASF110
     /tmp/ccBf6xWB.s:3380   .debug_str:00000000000001a0 .LASF111
     /tmp/ccBf6xWB.s:3606   .debug_str:000000000000089a .LASF112
     /tmp/ccBf6xWB.s:3510   .debug_str:00000000000005db .LASF113
     /tmp/ccBf6xWB.s:3360   .debug_str:000000000000010b .LASF114
     /tmp/ccBf6xWB.s:3628   .debug_str:00000000000009f1 .LASF115
     /tmp/ccBf6xWB.s:3340   .debug_str:0000000000000049 .LASF116
     /tmp/ccBf6xWB.s:3528   .debug_str:0000000000000650 .LASF117
     /tmp/ccBf6xWB.s:3354   .debug_str:00000000000000e4 .LASF118
     /tmp/ccBf6xWB.s:3494   .debug_str:0000000000000544 .LASF119
     /tmp/ccBf6xWB.s:3598   .debug_str:000000000000086f .LASF120
     /tmp/ccBf6xWB.s:3500   .debug_str:000000000000056b .LASF121
     /tmp/ccBf6xWB.s:3480   .debug_str:00000000000004d6 .LASF122
     /tmp/ccBf6xWB.s:3560   .debug_str:0000000000000777 .LASF123
     /tmp/ccBf6xWB.s:3614   .debug_str:00000000000008be .LASF124
     /tmp/ccBf6xWB.s:3344   .debug_str:0000000000000083 .LASF125
     /tmp/ccBf6xWB.s:3612   .debug_str:00000000000008b9 .LASF126
     /tmp/ccBf6xWB.s:3424   .debug_str:0000000000000324 .LASF127
     /tmp/ccBf6xWB.s:3592   .debug_str:000000000000085b .LASF175
     /tmp/ccBf6xWB.s:3436   .debug_str:00000000000003a0 .LASF128
     /tmp/ccBf6xWB.s:3496   .debug_str:0000000000000558 .LASF129
     /tmp/ccBf6xWB.s:3428   .debug_str:0000000000000356 .LASF130
     /tmp/ccBf6xWB.s:3568   .debug_str:00000000000007a9 .LASF132
     /tmp/ccBf6xWB.s:3540   .debug_str:00000000000006d0 .LASF176
     /tmp/ccBf6xWB.s:3522   .debug_str:000000000000062f .LASF177
     /tmp/ccBf6xWB.s:3334   .debug_str:000000000000000c .LASF133
     /tmp/ccBf6xWB.s:3498   .debug_str:0000000000000565 .LASF134
     /tmp/ccBf6xWB.s:3624   .debug_str:00000000000009d4 .LASF135
     /tmp/ccBf6xWB.s:3602   .debug_str:0000000000000888 .LASF136
     /tmp/ccBf6xWB.s:3466   .debug_str:000000000000046a .LASF137
     /tmp/ccBf6xWB.s:3634   .debug_str:0000000000000a16 .LASF138
     /tmp/ccBf6xWB.s:3464   .debug_str:000000000000045e .LASF139
     /tmp/ccBf6xWB.s:3364   .debug_str:000000000000012d .LASF140
     /tmp/ccBf6xWB.s:3484   .debug_str:00000000000004e5 .LASF141
     /tmp/ccBf6xWB.s:3396   .debug_str:0000000000000216 .LASF142
     /tmp/ccBf6xWB.s:3338   .debug_str:0000000000000021 .LASF143
     /tmp/ccBf6xWB.s:3384   .debug_str:00000000000001bb .LASF144
     /tmp/ccBf6xWB.s:3382   .debug_str:00000000000001a8 .LASF145
     /tmp/ccBf6xWB.s:3390   .debug_str:00000000000001eb .LASF146
     /tmp/ccBf6xWB.s:3386   .debug_str:00000000000001c4 .LASF147
     /tmp/ccBf6xWB.s:3574   .debug_str:00000000000007d8 .LASF178
     /tmp/ccBf6xWB.s:3640   .debug_str:0000000000000a3a .LASF148
     /tmp/ccBf6xWB.s:3552   .debug_str:0000000000000739 .LASF149
     /tmp/ccBf6xWB.s:577    .text:0000000000000230 .LFB41
     /tmp/ccBf6xWB.s:602    .text:0000000000000258 .LFE41
     /tmp/ccBf6xWB.s:591    .text:0000000000000248 .LVL42
     /tmp/ccBf6xWB.s:539    .text:0000000000000210 .LFB40
     /tmp/ccBf6xWB.s:571    .text:0000000000000230 .LFE40
     /tmp/ccBf6xWB.s:550    .text:000000000000021c .LBB48
     /tmp/ccBf6xWB.s:562    .text:0000000000000224 .LBE48
     /tmp/ccBf6xWB.s:3146   .debug_loc:0000000000000000 .LLST17
     /tmp/ccBf6xWB.s:57     .text:0000000000000020 .LFB39
     /tmp/ccBf6xWB.s:533    .text:0000000000000210 .LFE39
GAS LISTING /tmp/ccBf6xWB.s 			page 26


     /tmp/ccBf6xWB.s:3392   .debug_str:00000000000001f7 .LASF150
     /tmp/ccBf6xWB.s:3154   .debug_loc:0000000000000024 .LLST0
     /tmp/ccBf6xWB.s:3314   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccBf6xWB.s:3618   .debug_str:000000000000098d .LASF151
     /tmp/ccBf6xWB.s:3173   .debug_loc:0000000000000071 .LLST1
     /tmp/ccBf6xWB.s:3652   .debug_str:0000000000000a94 .LASF152
     /tmp/ccBf6xWB.s:3184   .debug_loc:00000000000000a7 .LLST2
     /tmp/ccBf6xWB.s:3332   .debug_str:0000000000000006 .LASF153
     /tmp/ccBf6xWB.s:3195   .debug_loc:00000000000000dd .LLST3
     /tmp/ccBf6xWB.s:3210   .debug_loc:0000000000000126 .LLST4
     /tmp/ccBf6xWB.s:3416   .debug_str:00000000000002d6 .LASF154
     /tmp/ccBf6xWB.s:3217   .debug_loc:0000000000000149 .LLST5
     /tmp/ccBf6xWB.s:3476   .debug_str:00000000000004be .LASF155
     /tmp/ccBf6xWB.s:3224   .debug_loc:000000000000016c .LLST6
     /tmp/ccBf6xWB.s:3231   .debug_loc:000000000000018f .LLST7
     /tmp/ccBf6xWB.s:3368   .debug_str:000000000000014b .LASF156
     /tmp/ccBf6xWB.s:3238   .debug_loc:00000000000001b2 .LLST8
     /tmp/ccBf6xWB.s:3666   .debug_str:0000000000000b06 .LASF157
     /tmp/ccBf6xWB.s:3245   .debug_loc:00000000000001d5 .LLST9
     /tmp/ccBf6xWB.s:3252   .debug_loc:00000000000001f8 .LLST10
     /tmp/ccBf6xWB.s:3259   .debug_loc:000000000000021b .LLST11
     /tmp/ccBf6xWB.s:3266   .debug_loc:000000000000023e .LLST12
     /tmp/ccBf6xWB.s:3584   .debug_str:0000000000000813 .LASF158
     /tmp/ccBf6xWB.s:3273   .debug_loc:0000000000000261 .LLST13
     /tmp/ccBf6xWB.s:3280   .debug_loc:0000000000000284 .LLST14
     /tmp/ccBf6xWB.s:212    .text:00000000000000c0 .LVL9
     /tmp/ccBf6xWB.s:230    .text:00000000000000d0 .LVL11
     /tmp/ccBf6xWB.s:314    .text:0000000000000108 .LVL19
     /tmp/ccBf6xWB.s:366    .text:0000000000000130 .LVL25
     /tmp/ccBf6xWB.s:389    .text:0000000000000148 .LVL27
     /tmp/ccBf6xWB.s:397    .text:0000000000000154 .LVL28
     /tmp/ccBf6xWB.s:414    .text:0000000000000164 .LVL30
     /tmp/ccBf6xWB.s:423    .text:0000000000000170 .LVL32
     /tmp/ccBf6xWB.s:103    .text:0000000000000054 .LBB28
     /tmp/ccBf6xWB.s:119    .text:0000000000000060 .LBE28
     /tmp/ccBf6xWB.s:124    .text:0000000000000064 .LBB30
     /tmp/ccBf6xWB.s:140    .text:0000000000000070 .LBE30
     /tmp/ccBf6xWB.s:249    .text:00000000000000d8 .LBB35
     /tmp/ccBf6xWB.s:260    .text:00000000000000dc .LBE35
     /tmp/ccBf6xWB.s:3287   .debug_loc:00000000000002a7 .LLST15
     /tmp/ccBf6xWB.s:262    .text:00000000000000dc .LBB37
     /tmp/ccBf6xWB.s:273    .text:00000000000000e0 .LBE37
     /tmp/ccBf6xWB.s:3294   .debug_loc:00000000000002ca .LLST16
     /tmp/ccBf6xWB.s:75     .text:000000000000003c .LBB24
     /tmp/ccBf6xWB.s:92     .text:0000000000000048 .LBE24
     /tmp/ccBf6xWB.s:449    .text:000000000000018c .LBB41
     /tmp/ccBf6xWB.s:464    .text:0000000000000198 .LBE41
     /tmp/ccBf6xWB.s:477    .text:00000000000001bc .LBB43
     /tmp/ccBf6xWB.s:492    .text:00000000000001c8 .LBE43
     /tmp/ccBf6xWB.s:505    .text:00000000000001ec .LBB45
     /tmp/ccBf6xWB.s:520    .text:00000000000001f8 .LBE45
     /tmp/ccBf6xWB.s:447    .text:000000000000018c .LVL34
     /tmp/ccBf6xWB.s:470    .text:00000000000001ac .LVL35
     /tmp/ccBf6xWB.s:475    .text:00000000000001bc .LVL36
     /tmp/ccBf6xWB.s:498    .text:00000000000001dc .LVL37
     /tmp/ccBf6xWB.s:503    .text:00000000000001ec .LVL38
     /tmp/ccBf6xWB.s:526    .text:000000000000020c .LVL39
GAS LISTING /tmp/ccBf6xWB.s 			page 27


     /tmp/ccBf6xWB.s:10     .text:0000000000000000 .LFB38
     /tmp/ccBf6xWB.s:40     .text:0000000000000020 .LFE38
     /tmp/ccBf6xWB.s:3636   .debug_str:0000000000000a1e .LASF159
     /tmp/ccBf6xWB.s:3448   .debug_str:00000000000003e8 .LASF160
     /tmp/ccBf6xWB.s:3434   .debug_str:0000000000000390 .LASF161
     /tmp/ccBf6xWB.s:3398   .debug_str:0000000000000224 .LASF162
     /tmp/ccBf6xWB.s:3444   .debug_str:00000000000003cf .LASF163
     /tmp/ccBf6xWB.s:3682   .debug_str:0000000000000b9d .LASF164
     /tmp/ccBf6xWB.s:3672   .debug_str:0000000000000b32 .LASF165
     /tmp/ccBf6xWB.s:3582   .debug_str:0000000000000804 .LASF166
     /tmp/ccBf6xWB.s:3532   .debug_str:0000000000000677 .LASF167
     /tmp/ccBf6xWB.s:549    .text:000000000000021c .LVL40
     /tmp/ccBf6xWB.s:559    .text:0000000000000224 .LVL41
     /tmp/ccBf6xWB.s:90     .text:0000000000000048 .LVL0
     /tmp/ccBf6xWB.s:97     .text:000000000000004c .LVL1
     /tmp/ccBf6xWB.s:112    .text:0000000000000058 .LVL2
     /tmp/ccBf6xWB.s:438    .text:000000000000017c .LVL33
     /tmp/ccBf6xWB.s:122    .text:0000000000000064 .LVL3
     /tmp/ccBf6xWB.s:285    .text:00000000000000ec .LVL15
     /tmp/ccBf6xWB.s:294    .text:00000000000000fc .LVL17
     /tmp/ccBf6xWB.s:138    .text:0000000000000070 .LVL4
     /tmp/ccBf6xWB.s:290    .text:00000000000000f4 .LVL16
     /tmp/ccBf6xWB.s:148    .text:0000000000000074 .LVL5
     /tmp/ccBf6xWB.s:159    .text:0000000000000088 .LVL6
     /tmp/ccBf6xWB.s:191    .text:00000000000000a0 .LVL7
     /tmp/ccBf6xWB.s:417    .text:0000000000000168 .LVL31
     /tmp/ccBf6xWB.s:329    .text:0000000000000114 .LVL20
     /tmp/ccBf6xWB.s:225    .text:00000000000000c8 .LVL10
     /tmp/ccBf6xWB.s:243    .text:00000000000000d8 .LVL12
     /tmp/ccBf6xWB.s:309    .text:0000000000000100 .LVL18
     /tmp/ccBf6xWB.s:342    .text:0000000000000118 .LVL21
     /tmp/ccBf6xWB.s:383    .text:0000000000000140 .LVL26
     /tmp/ccBf6xWB.s:348    .text:000000000000011c .LVL22
     /tmp/ccBf6xWB.s:354    .text:0000000000000120 .LVL23
     /tmp/ccBf6xWB.s:360    .text:0000000000000124 .LVL24
     /tmp/ccBf6xWB.s:409    .text:000000000000015c .LVL29
     /tmp/ccBf6xWB.s:206    .text:00000000000000b4 .LVL8
     /tmp/ccBf6xWB.s:257    .text:00000000000000dc .LVL13
     /tmp/ccBf6xWB.s:270    .text:00000000000000e0 .LVL14
     /tmp/ccBf6xWB.s:613    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccBf6xWB.s:101    .text:0000000000000054 .LBB27
     /tmp/ccBf6xWB.s:274    .text:00000000000000e0 .LBE27
     /tmp/ccBf6xWB.s:298    .text:00000000000000fc .LBB40
     /tmp/ccBf6xWB.s:442    .text:000000000000017c .LBE40
     /tmp/ccBf6xWB.s:197    .text:00000000000000b0 .LBB33
     /tmp/ccBf6xWB.s:246    .text:00000000000000d8 .LBE33
     /tmp/ccBf6xWB.s:300    .text:00000000000000fc .LBB34
     /tmp/ccBf6xWB.s:440    .text:000000000000017c .LBE34

UNDEFINED SYMBOLS
__putc
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB12createThreadEPPS_PFvPvES2_S2_
_ZN3TCB10threadExitEv
_ZN3TCB5yieldEv
_ZN3TCB4joinEPS_
GAS LISTING /tmp/ccBf6xWB.s 			page 28


__getc
_Z11printStringPKc
_Z8printIntiii
console_handler
